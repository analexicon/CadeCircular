generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Employee {
  id             String @id @default(uuid())
  name           String
  username       String @unique
  password       String
  identification String @unique
  type           Int // 1: driver, 2: manager

  driver  Driver?
  manager Manager?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Driver {
  journeys Journey[]

  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employeeId String   @id

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Manager {
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employeeId String   @id

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bus {
  id           String  @id @default(uuid())
  licensePlate String  @unique
  model        String
  capacity     Int
  available    Boolean

  journeys Journey[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BusStop {
  id          String @id @default(uuid())
  name        String @unique
  description String

  busStopRoute BusStop_Route[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Route {
  id          String @id @default(uuid())
  name        String
  description String

  busStopRoute BusStop_Route[]
  Journey      Journey[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BusStop_Route {
  id    String @id @default(uuid())
  order Int

  forecasts Forecast[]

  busStop   BusStop @relation(fields: [busStopId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  busStopId String
  route     Route   @relation(fields: [routeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  routeId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Forecast {
  id       String   @id @default(uuid())
  schedule DateTime

  busStopRoute   BusStop_Route @relation(fields: [busStopRouteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  busStopRouteId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Journey {
  id               String   @id @default(uuid())
  paused           Boolean
  active           Boolean
  startDate        DateTime
  nextBusStopIndex Int

  driver   Driver @relation(fields: [driverId], references: [employeeId], onDelete: Cascade, onUpdate: Cascade)
  driverId String
  bus      Bus    @relation(fields: [busId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  busId    String
  route    Route  @relation(fields: [routeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  routeId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
